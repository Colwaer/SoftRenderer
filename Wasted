void triangle(Vec2i t0, Vec2i t1, Vec2i t2, TGAImage &image, TGAColor color)
{
    line(t0, t1, image, color);
    line(t2, t1, image, color);
    line(t0, t2, image, color);
}
void FillTriangle(Vec2i t0, Vec2i t1, Vec2i t2, TGAImage &image, TGAColor color)
{
    if (t1.y <= t2.y)
    {
        Vec2i t;
        t = t1;
        t1 = t2;
        t2 = t;
    }
    if (t0.y <= t1.y)
    {
        Vec2i t;
        t = t0;
        t0 = t1;
        t1 = t;
    }
    if (t1.y <= t2.y)
    {
        Vec2i t;
        t = t1;
        t1 = t2;
        t2 = t;
    }
    int lenY1 = t0.y - t1.y;
    int lenY2 = t1.y - t2.y;
    int lenY = t0.y - t2.y;
    int lenX = t2.x - t0.x;
    int lenX1 = t1.x - t0.x;
    int lenX2 = t2.x - t1.x;
    Vec2i pos1;
    Vec2i pos2;
    pos1.x = t0.x;
    pos2.x = t0.x;
    for (int y = t0.y; y >= t1.y; y--)
    {

        pos1.y = y;
        pos2.y = y;
        pos1.x = (t0.y - y) / (float)lenY * lenX + t0.x;
        pos2.x = (t0.y - y) / (float)lenY1 * lenX1 + t0.x;
        line(pos1, pos2, image, color);
    }
    Vec2i t3 = pos1;
    for (int y = t1.y; y >= t2.y; y--)
    {
        pos1.y = y;
        pos2.y = y;
        pos1.x = (t0.y - y) / (float)lenY * lenX + t0.x;
        pos2.x = (t1.y - y) / (float)lenY2 * lenX2 + t1.x;
        line(pos1, pos2, image, color);
    }
}